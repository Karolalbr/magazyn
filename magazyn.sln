using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Threading.Tasks;
using Infrastructure.Data;
using System.Text.Json;
using Core.Models;
using System.Collections.Generic;

namespace SuperHeroesWebAPI.Controllers
{
    [ApiController]
    [Route("api/superheroes")]
    public class SuperheroesController : ControllerBase
    {
        private readonly SuperheroContext _context;

        public SuperheroesController(SuperheroContext context)
        {
            _context = context;
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetSuperheroById(int id)
        {
            var superhero = await _context.superhero
                .Include(s => s.hero_attributes)
                    .ThenInclude(ha => ha.attribute)
                .FirstOrDefaultAsync(s => s.id == id);

            if (superhero == null)
            {
                return NotFound();
            }

            var result = new
            {
                name = superhero.superhero_name,
                height = superhero.height_cm.HasValue ? $"{superhero.height_cm.Value / 100.0} m" : "N/A",
                weight = superhero.weight_kg.HasValue ? $"{superhero.weight_kg.Value} kg" : "N/A",
                attributes = superhero.hero_attributes.Select(ha => new
                {
                    attributeName = ha.attribute.attribute_name,
                    attributeValue = ha.attribute_value
                }).ToList()
            };

            return Ok(result);
        }

        [HttpPost("{id}/alignment")]
        public async Task<IActionResult> UpdateAlignment(int id, [FromBody] AlignmentUpdateRequest request)
        {
            var validAlignments = new[] { "Bad", "Good", "Neutral", "N/A" };
            if (!validAlignments.Contains(request.Alignment))
            {
                return BadRequest("Invalid alignment value.");
            }

            var superhero = await _context.superhero.FirstOrDefaultAsync(s => s.id == id);
            if (superhero == null)
            {
                return NotFound();
            }

            var alignment = await _context.alignment.FirstOrDefaultAsync(a => a.name == request.Alignment);
            if (alignment == null)
            {
                return BadRequest("Invalid alignment value.");
            }

            superhero.alignment_id = alignment.id;
            await _context.SaveChangesAsync();

            return NoContent();
        }
    }

    public class AlignmentUpdateRequest
    {
        public string Alignment { get; set; }
    }
}
